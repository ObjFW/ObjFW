/*
 * Copyright (c) 2008-2025 Jonathan Schleifer <js@nil.im>
 *
 * All rights reserved.
 *
 * This program is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License version 3.0 only,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License
 * version 3.0 for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3.0 along with this program. If not, see
 * <https://www.gnu.org/licenses/>.
 */

/* This file is automatically generated from amiga-library.xml */

#include "config.h"

#import "amiga-library.h"
#import "OFObject.h"
#import "OFApplication.h"
#import "OFBlock.h"
#import "OFDNSResourceRecord.h"
#import "OFEmbeddedIRIHandler.h"
#import "OFHTTPRequest.h"
#import "OFHTTPResponse.h"
#import "OFList.h"
#import "OFMethodSignature.h"
#import "OFOnce.h"
#import "OFPBKDF2.h"
#import "OFPlainCondition.h"
#import "OFPlainMutex.h"
#import "OFPlainThread.h"
#import "OFScrypt.h"
#import "OFSocket.h"
#import "OFStdIOStream.h"
#import "OFStrPTime.h"
#import "OFString.h"
#import "OFTLSKey.h"
#import "OFTLSStream.h"
#import "OFX509Certificate.h"
#import "OFZIPArchiveEntry.h"
#import "OFException.h"

extern struct Library *ObjFWBase;

#if OF_GCC_VERSION >= 1100
# pragma GCC diagnostic ignored "-Warray-parameter"
#endif

bool
OFInit(struct OFLinklibContext *_Nonnull libc)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((bool (*)(struct OFLinklibContext *_Nonnull))*(void **)(((uintptr_t)ObjFWBase) - 28))(libc);
}

void *_Nullable
OFAllocMemory(size_t count, size_t size)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((void *_Nullable (*)(size_t, size_t))*(void **)(((uintptr_t)ObjFWBase) - 34))(count, size);
}

void *_Nullable
OFAllocZeroedMemory(size_t count, size_t size)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((void *_Nullable (*)(size_t, size_t))*(void **)(((uintptr_t)ObjFWBase) - 40))(count, size);
}

void *_Nullable
OFResizeMemory(void *_Nullable pointer, size_t count, size_t size)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((void *_Nullable (*)(void *_Nullable, size_t, size_t))*(void **)(((uintptr_t)ObjFWBase) - 46))(pointer, count, size);
}

void
OFFreeMemory(void *_Nullable pointer)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	__extension__ ((void (*)(void *_Nullable))*(void **)(((uintptr_t)ObjFWBase) - 52))(pointer);
}

id _Nonnull
OFAllocObject(Class _Nonnull class_, size_t extraSize, size_t extraAlignment, void *_Nullable *_Nullable extra)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((id _Nonnull (*)(Class _Nonnull, size_t, size_t, void *_Nullable *_Nullable))*(void **)(((uintptr_t)ObjFWBase) - 58))(class_, extraSize, extraAlignment, extra);
}

void
OFMethodNotFound(id _Nonnull self, SEL _Nonnull _cmd)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	__extension__ ((void (*)(id _Nonnull, SEL _Nonnull))*(void **)(((uintptr_t)ObjFWBase) - 64))(self, _cmd);

	OF_UNREACHABLE
}

void
OFHashInit(unsigned long *_Nonnull hash)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	__extension__ ((void (*)(unsigned long *_Nonnull))*(void **)(((uintptr_t)ObjFWBase) - 70))(hash);
}

uint16_t
OFRandom16()
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((uint16_t (*)())*(void **)(((uintptr_t)ObjFWBase) - 76))();
}

uint32_t
OFRandom32()
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((uint32_t (*)())*(void **)(((uintptr_t)ObjFWBase) - 82))();
}

uint64_t
OFRandom64()
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((uint64_t (*)())*(void **)(((uintptr_t)ObjFWBase) - 88))();
}

unsigned long *_Nonnull
OFHashSeedRef()
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((unsigned long *_Nonnull (*)())*(void **)(((uintptr_t)ObjFWBase) - 94))();
}

int
OFApplicationMain(int *_Nonnull argc, char *_Nullable *_Nonnull *_Nonnull argv, id <OFApplicationDelegate> delegate)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((int (*)(int *_Nonnull, char *_Nullable *_Nonnull *_Nonnull, id <OFApplicationDelegate>))*(void **)(((uintptr_t)ObjFWBase) - 100))(argc, argv, delegate);
}

void *_Nullable
_Block_copy(const void *_Nullable block)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((void *_Nullable (*)(const void *_Nullable))*(void **)(((uintptr_t)ObjFWBase) - 106))(block);
}

void
_Block_release(const void *_Nullable block)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	__extension__ ((void (*)(const void *_Nullable))*(void **)(((uintptr_t)ObjFWBase) - 112))(block);
}

void
_Block_object_assign(void *_Nonnull dst_, const void *_Nullable src_)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	__extension__ ((void (*)(void *_Nonnull, const void *_Nullable))*(void **)(((uintptr_t)ObjFWBase) - 118))(dst_, src_);
}

void
_Block_object_dispose(const void *object_, int flags)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	__extension__ ((void (*)(const void *, int))*(void **)(((uintptr_t)ObjFWBase) - 124))(object_, flags);
}

OFString *_Nonnull
OFDNSClassName(OFDNSClass DNSClass)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((OFString *_Nonnull (*)(OFDNSClass))*(void **)(((uintptr_t)ObjFWBase) - 130))(DNSClass);
}

OFString *_Nonnull
OFDNSRecordTypeName(OFDNSRecordType recordType)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((OFString *_Nonnull (*)(OFDNSRecordType))*(void **)(((uintptr_t)ObjFWBase) - 136))(recordType);
}

OFDNSClass
OFDNSClassParseName(OFString *_Nonnull string)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((OFDNSClass (*)(OFString *_Nonnull))*(void **)(((uintptr_t)ObjFWBase) - 142))(string);
}

OFDNSRecordType
OFDNSRecordTypeParseName(OFString *_Nonnull string)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((OFDNSRecordType (*)(OFString *_Nonnull))*(void **)(((uintptr_t)ObjFWBase) - 148))(string);
}

void
OFRegisterEmbeddedFile(OFString *_Nonnull name, const uint8_t *_Nonnull bytes, size_t size)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	__extension__ ((void (*)(OFString *_Nonnull, const uint8_t *_Nonnull, size_t))*(void **)(((uintptr_t)ObjFWBase) - 154))(name, bytes, size);
}

OFString *_Nullable
OFHTTPRequestMethodString(OFHTTPRequestMethod method)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((OFString *_Nullable (*)(OFHTTPRequestMethod))*(void **)(((uintptr_t)ObjFWBase) - 160))(method);
}

OFHTTPRequestMethod
OFHTTPRequestMethodParseString(OFString *string)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((OFHTTPRequestMethod (*)(OFString *))*(void **)(((uintptr_t)ObjFWBase) - 166))(string);
}

OFString *_Nonnull
OFHTTPStatusCodeString(short code)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((OFString *_Nonnull (*)(short))*(void **)(((uintptr_t)ObjFWBase) - 172))(code);
}

OFListItem _Nullable
OFListItemNext(OFListItem _Nonnull listItem)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((OFListItem _Nullable (*)(OFListItem _Nonnull))*(void **)(((uintptr_t)ObjFWBase) - 178))(listItem);
}

OFListItem _Nullable
OFListItemPrevious(OFListItem _Nonnull listItem)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((OFListItem _Nullable (*)(OFListItem _Nonnull))*(void **)(((uintptr_t)ObjFWBase) - 184))(listItem);
}

id _Nonnull
OFListItemObject(OFListItem _Nonnull listItem)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((id _Nonnull (*)(OFListItem _Nonnull))*(void **)(((uintptr_t)ObjFWBase) - 190))(listItem);
}

size_t
OFSizeOfTypeEncoding(const char *type)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((size_t (*)(const char *))*(void **)(((uintptr_t)ObjFWBase) - 196))(type);
}

size_t
OFAlignmentOfTypeEncoding(const char *type)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((size_t (*)(const char *))*(void **)(((uintptr_t)ObjFWBase) - 202))(type);
}

void
OFOnce(OFOnceControl *_Nonnull control, OFOnceFunction _Nonnull func)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	__extension__ ((void (*)(OFOnceControl *_Nonnull, OFOnceFunction _Nonnull))*(void **)(((uintptr_t)ObjFWBase) - 208))(control, func);
}

void
OFPBKDF2(OFPBKDF2Parameters parameters)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	__extension__ ((void (*)(OFPBKDF2Parameters))*(void **)(((uintptr_t)ObjFWBase) - 214))(parameters);
}

int
OFPlainConditionNew(OFPlainCondition *_Nonnull condition)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((int (*)(OFPlainCondition *_Nonnull))*(void **)(((uintptr_t)ObjFWBase) - 220))(condition);
}

int
OFPlainConditionSignal(OFPlainCondition *_Nonnull condition)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((int (*)(OFPlainCondition *_Nonnull))*(void **)(((uintptr_t)ObjFWBase) - 226))(condition);
}

int
OFPlainConditionBroadcast(OFPlainCondition *_Nonnull condition)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((int (*)(OFPlainCondition *_Nonnull))*(void **)(((uintptr_t)ObjFWBase) - 232))(condition);
}

int
OFPlainConditionWait(OFPlainCondition *_Nonnull condition, OFPlainMutex *_Nonnull mutex)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((int (*)(OFPlainCondition *_Nonnull, OFPlainMutex *_Nonnull))*(void **)(((uintptr_t)ObjFWBase) - 238))(condition, mutex);
}

int
OFPlainConditionTimedWait(OFPlainCondition *_Nonnull condition, OFPlainMutex *_Nonnull mutex, OFTimeInterval timeout)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((int (*)(OFPlainCondition *_Nonnull, OFPlainMutex *_Nonnull, OFTimeInterval))*(void **)(((uintptr_t)ObjFWBase) - 244))(condition, mutex, timeout);
}

int
OFPlainConditionWaitOrExecSignal(OFPlainCondition *_Nonnull condition, OFPlainMutex *_Nonnull mutex, ULONG *_Nonnull signalMask)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((int (*)(OFPlainCondition *_Nonnull, OFPlainMutex *_Nonnull, ULONG *_Nonnull))*(void **)(((uintptr_t)ObjFWBase) - 250))(condition, mutex, signalMask);
}

int
OFPlainConditionTimedWaitOrExecSignal(OFPlainCondition *_Nonnull condition, OFPlainMutex *_Nonnull mutex, OFTimeInterval timeout, ULONG *_Nonnull signalMask)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((int (*)(OFPlainCondition *_Nonnull, OFPlainMutex *_Nonnull, OFTimeInterval, ULONG *_Nonnull))*(void **)(((uintptr_t)ObjFWBase) - 256))(condition, mutex, timeout, signalMask);
}

int
OFPlainConditionFree(OFPlainCondition *_Nonnull condition)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((int (*)(OFPlainCondition *_Nonnull))*(void **)(((uintptr_t)ObjFWBase) - 262))(condition);
}

int
OFPlainMutexNew(OFPlainMutex *_Nonnull mutex)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((int (*)(OFPlainMutex *_Nonnull))*(void **)(((uintptr_t)ObjFWBase) - 268))(mutex);
}

int
OFPlainMutexLock(OFPlainMutex *_Nonnull mutex)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((int (*)(OFPlainMutex *_Nonnull))*(void **)(((uintptr_t)ObjFWBase) - 274))(mutex);
}

int
OFPlainMutexTryLock(OFPlainMutex *_Nonnull mutex)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((int (*)(OFPlainMutex *_Nonnull))*(void **)(((uintptr_t)ObjFWBase) - 280))(mutex);
}

int
OFPlainMutexUnlock(OFPlainMutex *_Nonnull mutex)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((int (*)(OFPlainMutex *_Nonnull))*(void **)(((uintptr_t)ObjFWBase) - 286))(mutex);
}

int
OFPlainMutexFree(OFPlainMutex *_Nonnull mutex)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((int (*)(OFPlainMutex *_Nonnull))*(void **)(((uintptr_t)ObjFWBase) - 292))(mutex);
}

int
OFPlainRecursiveMutexNew(OFPlainRecursiveMutex *_Nonnull mutex)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((int (*)(OFPlainRecursiveMutex *_Nonnull))*(void **)(((uintptr_t)ObjFWBase) - 298))(mutex);
}

int
OFPlainRecursiveMutexLock(OFPlainRecursiveMutex *_Nonnull mutex)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((int (*)(OFPlainRecursiveMutex *_Nonnull))*(void **)(((uintptr_t)ObjFWBase) - 304))(mutex);
}

int
OFPlainRecursiveMutexTryLock(OFPlainRecursiveMutex *_Nonnull mutex)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((int (*)(OFPlainRecursiveMutex *_Nonnull))*(void **)(((uintptr_t)ObjFWBase) - 310))(mutex);
}

int
OFPlainRecursiveMutexUnlock(OFPlainRecursiveMutex *_Nonnull mutex)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((int (*)(OFPlainRecursiveMutex *_Nonnull))*(void **)(((uintptr_t)ObjFWBase) - 316))(mutex);
}

int
OFPlainRecursiveMutexFree(OFPlainRecursiveMutex *_Nonnull mutex)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((int (*)(OFPlainRecursiveMutex *_Nonnull))*(void **)(((uintptr_t)ObjFWBase) - 322))(mutex);
}

int
OFPlainThreadAttributesInit(OFPlainThreadAttributes *_Nonnull attr)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((int (*)(OFPlainThreadAttributes *_Nonnull))*(void **)(((uintptr_t)ObjFWBase) - 328))(attr);
}

int
OFPlainThreadNew(OFPlainThread _Nonnull *_Nonnull thread, const char *_Nullable name, OFPlainThreadFunction _Nonnull function, id _Nullable object, const OFPlainThreadAttributes *_Nullable attr)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((int (*)(OFPlainThread _Nonnull *_Nonnull, const char *_Nullable, OFPlainThreadFunction _Nonnull, id _Nullable, const OFPlainThreadAttributes *_Nullable))*(void **)(((uintptr_t)ObjFWBase) - 334))(thread, name, function, object, attr);
}

void
OFSetThreadName(const char *_Nullable name)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	__extension__ ((void (*)(const char *_Nullable))*(void **)(((uintptr_t)ObjFWBase) - 340))(name);
}

int
OFPlainThreadJoin(OFPlainThread _Nonnull thread)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((int (*)(OFPlainThread _Nonnull))*(void **)(((uintptr_t)ObjFWBase) - 346))(thread);
}

int
OFPlainThreadDetach(OFPlainThread _Nonnull thread)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((int (*)(OFPlainThread _Nonnull))*(void **)(((uintptr_t)ObjFWBase) - 352))(thread);
}

OFPlainThread _Nonnull
OFCurrentPlainThread()
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((OFPlainThread _Nonnull (*)())*(void **)(((uintptr_t)ObjFWBase) - 358))();
}

bool
OFPlainThreadIsCurrent(OFPlainThread _Nonnull thread)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((bool (*)(OFPlainThread _Nonnull))*(void **)(((uintptr_t)ObjFWBase) - 364))(thread);
}

void
OFScrypt(OFScryptParameters parameters)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	__extension__ ((void (*)(OFScryptParameters))*(void **)(((uintptr_t)ObjFWBase) - 370))(parameters);
}

void
_OFSalsa20_8Core(uint32_t *_Nonnull buffer)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	__extension__ ((void (*)(uint32_t *_Nonnull))*(void **)(((uintptr_t)ObjFWBase) - 376))(buffer);
}

void
_OFScryptBlockMix(uint32_t *_Nonnull output, const uint32_t *_Nonnull input, size_t blockSize)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	__extension__ ((void (*)(uint32_t *_Nonnull, const uint32_t *_Nonnull, size_t))*(void **)(((uintptr_t)ObjFWBase) - 382))(output, input, blockSize);
}

void
_OFScryptROMix(uint32_t *buffer, size_t blockSize, size_t costFactor, uint32_t *tmp)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	__extension__ ((void (*)(uint32_t *, size_t, size_t, uint32_t *))*(void **)(((uintptr_t)ObjFWBase) - 388))(buffer, blockSize, costFactor, tmp);
}

OFSocketAddress
OFSocketAddressParseIP(OFString *_Nonnull IP, uint16_t port)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((OFSocketAddress (*)(OFString *_Nonnull, uint16_t))*(void **)(((uintptr_t)ObjFWBase) - 394))(IP, port);
}

OFSocketAddress
OFSocketAddressParseIPv4(OFString *_Nonnull IP, uint16_t port)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((OFSocketAddress (*)(OFString *_Nonnull, uint16_t))*(void **)(((uintptr_t)ObjFWBase) - 400))(IP, port);
}

OFSocketAddress
OFSocketAddressParseIPv6(OFString *_Nonnull IP, uint16_t port)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((OFSocketAddress (*)(OFString *_Nonnull, uint16_t))*(void **)(((uintptr_t)ObjFWBase) - 406))(IP, port);
}

OFSocketAddress
OFSocketAddressMakeUNIX(OFString *_Nonnull path)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((OFSocketAddress (*)(OFString *_Nonnull))*(void **)(((uintptr_t)ObjFWBase) - 412))(path);
}

OFSocketAddress
OFSocketAddressMakeIPX(uint32_t network, const unsigned char *_Nonnull node, uint16_t port)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((OFSocketAddress (*)(uint32_t, const unsigned char *_Nonnull, uint16_t))*(void **)(((uintptr_t)ObjFWBase) - 418))(network, node, port);
}

OFSocketAddress
OFSocketAddressMakeAppleTalk(uint16_t network, uint8_t node, uint8_t port)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((OFSocketAddress (*)(uint16_t, uint8_t, uint8_t))*(void **)(((uintptr_t)ObjFWBase) - 424))(network, node, port);
}

bool
OFSocketAddressEqual(const OFSocketAddress *_Nonnull address1, const OFSocketAddress *_Nonnull address2)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((bool (*)(const OFSocketAddress *_Nonnull, const OFSocketAddress *_Nonnull))*(void **)(((uintptr_t)ObjFWBase) - 430))(address1, address2);
}

unsigned long
OFSocketAddressHash(const OFSocketAddress *_Nonnull address)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((unsigned long (*)(const OFSocketAddress *_Nonnull))*(void **)(((uintptr_t)ObjFWBase) - 436))(address);
}

OFString *_Nonnull
OFSocketAddressString(const OFSocketAddress *_Nonnull address)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((OFString *_Nonnull (*)(const OFSocketAddress *_Nonnull))*(void **)(((uintptr_t)ObjFWBase) - 442))(address);
}

OFString *_Nonnull
OFSocketAddressDescription(const OFSocketAddress *_Nonnull address)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((OFString *_Nonnull (*)(const OFSocketAddress *_Nonnull))*(void **)(((uintptr_t)ObjFWBase) - 448))(address);
}

void
OFSocketAddressSetIPPort(OFSocketAddress *_Nonnull address, uint16_t port)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	__extension__ ((void (*)(OFSocketAddress *_Nonnull, uint16_t))*(void **)(((uintptr_t)ObjFWBase) - 454))(address, port);
}

uint16_t
OFSocketAddressIPPort(const OFSocketAddress *_Nonnull address)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((uint16_t (*)(const OFSocketAddress *_Nonnull))*(void **)(((uintptr_t)ObjFWBase) - 460))(address);
}

OFString *
OFSocketAddressUNIXPath(const OFSocketAddress *_Nonnull address)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((OFString *(*)(const OFSocketAddress *_Nonnull))*(void **)(((uintptr_t)ObjFWBase) - 466))(address);
}

void
OFSocketAddressSetIPXNetwork(OFSocketAddress *_Nonnull address, uint32_t network)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	__extension__ ((void (*)(OFSocketAddress *_Nonnull, uint32_t))*(void **)(((uintptr_t)ObjFWBase) - 472))(address, network);
}

uint32_t
OFSocketAddressIPXNetwork(const OFSocketAddress *_Nonnull address)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((uint32_t (*)(const OFSocketAddress *_Nonnull))*(void **)(((uintptr_t)ObjFWBase) - 478))(address);
}

void
OFSocketAddressSetIPXNode(OFSocketAddress *_Nonnull address, const unsigned char *_Nonnull node)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	__extension__ ((void (*)(OFSocketAddress *_Nonnull, const unsigned char *_Nonnull))*(void **)(((uintptr_t)ObjFWBase) - 484))(address, node);
}

void
OFSocketAddressGetIPXNode(const OFSocketAddress *_Nonnull address, unsigned char *_Nonnull node)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	__extension__ ((void (*)(const OFSocketAddress *_Nonnull, unsigned char *_Nonnull))*(void **)(((uintptr_t)ObjFWBase) - 490))(address, node);
}

void
OFSocketAddressSetIPXPort(OFSocketAddress *_Nonnull address, uint16_t port)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	__extension__ ((void (*)(OFSocketAddress *_Nonnull, uint16_t))*(void **)(((uintptr_t)ObjFWBase) - 496))(address, port);
}

uint16_t
OFSocketAddressIPXPort(const OFSocketAddress *_Nonnull address)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((uint16_t (*)(const OFSocketAddress *_Nonnull))*(void **)(((uintptr_t)ObjFWBase) - 502))(address);
}

void
OFSocketAddressSetAppleTalkNetwork(OFSocketAddress *_Nonnull address, uint16_t network)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	__extension__ ((void (*)(OFSocketAddress *_Nonnull, uint16_t))*(void **)(((uintptr_t)ObjFWBase) - 508))(address, network);
}

uint16_t
OFSocketAddressAppleTalkNetwork(const OFSocketAddress *_Nonnull address)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((uint16_t (*)(const OFSocketAddress *_Nonnull))*(void **)(((uintptr_t)ObjFWBase) - 514))(address);
}

void
OFSocketAddressSetAppleTalkNode(OFSocketAddress *_Nonnull address, uint8_t node)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	__extension__ ((void (*)(OFSocketAddress *_Nonnull, uint8_t))*(void **)(((uintptr_t)ObjFWBase) - 520))(address, node);
}

uint8_t
OFSocketAddressAppleTalkNode(const OFSocketAddress *_Nonnull address)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((uint8_t (*)(const OFSocketAddress *_Nonnull))*(void **)(((uintptr_t)ObjFWBase) - 526))(address);
}

void
OFSocketAddressSetAppleTalkPort(OFSocketAddress *_Nonnull address, uint8_t port)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	__extension__ ((void (*)(OFSocketAddress *_Nonnull, uint8_t))*(void **)(((uintptr_t)ObjFWBase) - 532))(address, port);
}

uint8_t
OFSocketAddressAppleTalkPort(const OFSocketAddress *_Nonnull address)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((uint8_t (*)(const OFSocketAddress *_Nonnull))*(void **)(((uintptr_t)ObjFWBase) - 538))(address);
}

OFStdIOStream *_Nonnull *_Nullable
OFStdInRef()
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((OFStdIOStream *_Nonnull *_Nullable (*)())*(void **)(((uintptr_t)ObjFWBase) - 544))();
}

OFStdIOStream *_Nonnull *_Nullable
OFStdOutRef()
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((OFStdIOStream *_Nonnull *_Nullable (*)())*(void **)(((uintptr_t)ObjFWBase) - 550))();
}

OFStdIOStream *_Nonnull *_Nullable
OFStdErrRef()
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((OFStdIOStream *_Nonnull *_Nullable (*)())*(void **)(((uintptr_t)ObjFWBase) - 556))();
}

void
OFLogV(OFConstantString *_Nonnull format, va_list arguments)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	__extension__ ((void (*)(OFConstantString *_Nonnull, va_list))*(void **)(((uintptr_t)ObjFWBase) - 562))(format, arguments);
}

const char *_Nullable
_OFStrPTime(const char *buffer, const char *format, struct tm *tm, int16_t *_Nullable tz)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((const char *_Nullable (*)(const char *, const char *, struct tm *, int16_t *_Nullable))*(void **)(((uintptr_t)ObjFWBase) - 568))(buffer, format, tm, tz);
}

OFStringEncoding
OFStringEncodingParseName(OFString *_Nonnull string)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((OFStringEncoding (*)(OFString *_Nonnull))*(void **)(((uintptr_t)ObjFWBase) - 574))(string);
}

OFString *_Nullable
OFStringEncodingName(OFStringEncoding encoding)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((OFString *_Nullable (*)(OFStringEncoding))*(void **)(((uintptr_t)ObjFWBase) - 580))(encoding);
}

size_t
OFUTF16StringLength(const OFChar16 *_Nonnull string)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((size_t (*)(const OFChar16 *_Nonnull))*(void **)(((uintptr_t)ObjFWBase) - 586))(string);
}

size_t
OFUTF32StringLength(const OFChar32 *_Nonnull string)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((size_t (*)(const OFChar32 *_Nonnull))*(void **)(((uintptr_t)ObjFWBase) - 592))(string);
}

int
OFTLSKeyNew(OFTLSKey _Nonnull *_Nonnull key)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((int (*)(OFTLSKey _Nonnull *_Nonnull))*(void **)(((uintptr_t)ObjFWBase) - 598))(key);
}

int
OFTLSKeyFree(OFTLSKey _Nonnull key)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((int (*)(OFTLSKey _Nonnull))*(void **)(((uintptr_t)ObjFWBase) - 604))(key);
}

Class _Nonnull *_Nullable
OFTLSStreamImplementationRef()
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((Class _Nonnull *_Nullable (*)())*(void **)(((uintptr_t)ObjFWBase) - 610))();
}

OFString *
OFTLSStreamErrorCodeDescription(OFTLSStreamErrorCode errorCode)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((OFString *(*)(OFTLSStreamErrorCode))*(void **)(((uintptr_t)ObjFWBase) - 616))(errorCode);
}

Class _Nonnull *_Nullable
OFX509CertificateImplementationRef()
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((Class _Nonnull *_Nullable (*)())*(void **)(((uintptr_t)ObjFWBase) - 622))();
}

OFString *_Nonnull
OFZIPArchiveEntryVersionToString(uint16_t version)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((OFString *_Nonnull (*)(uint16_t))*(void **)(((uintptr_t)ObjFWBase) - 628))(version);
}

OFString *_Nonnull
OFZIPArchiveEntryCompressionMethodName(OFZIPArchiveEntryCompressionMethod compressionMethod)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((OFString *_Nonnull (*)(OFZIPArchiveEntryCompressionMethod))*(void **)(((uintptr_t)ObjFWBase) - 634))(compressionMethod);
}

size_t
OFZIPArchiveEntryExtraFieldFind(OFData *_Nonnull extraField, OFZIPArchiveEntryExtraFieldTag tag, uint16_t *_Nonnull size)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((size_t (*)(OFData *_Nonnull, OFZIPArchiveEntryExtraFieldTag, uint16_t *_Nonnull))*(void **)(((uintptr_t)ObjFWBase) - 640))(extraField, tag, size);
}

OFString *_Nonnull
OFStrError(int errNo)
{
	__asm__ __volatile__ (
	    "mr		%%r12, %0"
	    :: "r"(ObjFWBase) : "r12"
	);

	return __extension__ ((OFString *_Nonnull (*)(int))*(void **)(((uintptr_t)ObjFWBase) - 646))(errNo);
}

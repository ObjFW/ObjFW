/*
 * Copyright (c) 2008-2025 Jonathan Schleifer <js@nil.im>
 *
 * All rights reserved.
 *
 * This program is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License version 3.0 only,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License
 * version 3.0 for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3.0 along with this program. If not, see
 * <https://www.gnu.org/licenses/>.
 */

/* This file is automatically generated from amiga-library.xml */

#include "config.h"

#import "amiga-library-glue.h"

bool __saveds
glue_OFInit(struct OFLinklibContext *_Nonnull libc)
{
	return OFInit(libc);
}

void *_Nullable __saveds
glue_OFAllocMemory(size_t count, size_t size)
{
	return OFAllocMemory(count, size);
}

void *_Nullable __saveds
glue_OFAllocZeroedMemory(size_t count, size_t size)
{
	return OFAllocZeroedMemory(count, size);
}

void *_Nullable __saveds
glue_OFResizeMemory(void *_Nullable pointer, size_t count, size_t size)
{
	return OFResizeMemory(pointer, count, size);
}

void __saveds
glue_OFFreeMemory(void *_Nullable pointer)
{
	OFFreeMemory(pointer);
}

id _Nonnull __saveds
glue_OFAllocObject(Class _Nonnull class_, size_t extraSize, size_t extraAlignment, void *_Nullable *_Nullable extra)
{
	return OFAllocObject(class_, extraSize, extraAlignment, extra);
}

void __saveds
glue_OFMethodNotFound(id _Nonnull self, SEL _Nonnull _cmd)
{
	OFMethodNotFound(self, _cmd);
}

void __saveds
glue_OFHashInit(unsigned long *_Nonnull hash)
{
	OFHashInit(hash);
}

uint16_t __saveds
glue_OFRandom16(void)
{
	return OFRandom16();
}

uint32_t __saveds
glue_OFRandom32(void)
{
	return OFRandom32();
}

uint64_t __saveds
glue_OFRandom64(void)
{
	return OFRandom64();
}

unsigned long *_Nonnull __saveds
glue_OFHashSeedRef(void)
{
	return OFHashSeedRef();
}

int __saveds
glue_OFApplicationMain(int *_Nonnull argc, char *_Nullable *_Nonnull *_Nonnull argv, id <OFApplicationDelegate> delegate)
{
	return OFApplicationMain(argc, argv, delegate);
}

void *_Nullable __saveds
glue__Block_copy(const void *_Nullable block)
{
	return _Block_copy(block);
}

void __saveds
glue__Block_release(const void *_Nullable block)
{
	_Block_release(block);
}

void __saveds
glue__Block_object_assign(void *_Nonnull dst, const void *_Nullable src, int flags)
{
	_Block_object_assign(dst, src, flags);
}

void __saveds
glue__Block_object_dispose(const void *object, int flags)
{
	_Block_object_dispose(object, flags);
}

OFString *_Nonnull __saveds
glue_OFDNSClassName(OFDNSClass DNSClass)
{
	return OFDNSClassName(DNSClass);
}

OFString *_Nonnull __saveds
glue_OFDNSRecordTypeName(OFDNSRecordType recordType)
{
	return OFDNSRecordTypeName(recordType);
}

OFDNSClass __saveds
glue_OFDNSClassParseName(OFString *_Nonnull string)
{
	return OFDNSClassParseName(string);
}

OFDNSRecordType __saveds
glue_OFDNSRecordTypeParseName(OFString *_Nonnull string)
{
	return OFDNSRecordTypeParseName(string);
}

void __saveds
glue_OFRegisterEmbeddedFile(OFString *_Nonnull name, const uint8_t *_Nonnull bytes, size_t size)
{
	OFRegisterEmbeddedFile(name, bytes, size);
}

OFString *_Nullable __saveds
glue_OFHTTPRequestMethodString(OFHTTPRequestMethod method)
{
	return OFHTTPRequestMethodString(method);
}

OFHTTPRequestMethod __saveds
glue_OFHTTPRequestMethodParseString(OFString *string)
{
	return OFHTTPRequestMethodParseString(string);
}

OFString *_Nonnull __saveds
glue_OFHTTPStatusCodeString(short code)
{
	return OFHTTPStatusCodeString(code);
}

OFListItem _Nullable __saveds
glue_OFListItemNext(OFListItem _Nonnull listItem)
{
	return OFListItemNext(listItem);
}

OFListItem _Nullable __saveds
glue_OFListItemPrevious(OFListItem _Nonnull listItem)
{
	return OFListItemPrevious(listItem);
}

id _Nonnull __saveds
glue_OFListItemObject(OFListItem _Nonnull listItem)
{
	return OFListItemObject(listItem);
}

size_t __saveds
glue_OFSizeOfTypeEncoding(const char *type)
{
	return OFSizeOfTypeEncoding(type);
}

size_t __saveds
glue_OFAlignmentOfTypeEncoding(const char *type)
{
	return OFAlignmentOfTypeEncoding(type);
}

void __saveds
glue_OFOnce(OFOnceControl *_Nonnull control, OFOnceFunction _Nonnull func)
{
	OFOnce(control, func);
}

void __saveds
glue_OFPBKDF2(OFPBKDF2Parameters parameters)
{
	OFPBKDF2(parameters);
}

int __saveds
glue_OFPlainConditionNew(OFPlainCondition *_Nonnull condition)
{
	return OFPlainConditionNew(condition);
}

int __saveds
glue_OFPlainConditionSignal(OFPlainCondition *_Nonnull condition)
{
	return OFPlainConditionSignal(condition);
}

int __saveds
glue_OFPlainConditionBroadcast(OFPlainCondition *_Nonnull condition)
{
	return OFPlainConditionBroadcast(condition);
}

int __saveds
glue_OFPlainConditionWait(OFPlainCondition *_Nonnull condition, OFPlainMutex *_Nonnull mutex)
{
	return OFPlainConditionWait(condition, mutex);
}

int __saveds
glue_OFPlainConditionTimedWait(OFPlainCondition *_Nonnull condition, OFPlainMutex *_Nonnull mutex, OFTimeInterval timeout)
{
	return OFPlainConditionTimedWait(condition, mutex, timeout);
}

int __saveds
glue_OFPlainConditionWaitOrExecSignal(OFPlainCondition *_Nonnull condition, OFPlainMutex *_Nonnull mutex, ULONG *_Nonnull signalMask)
{
	return OFPlainConditionWaitOrExecSignal(condition, mutex, signalMask);
}

int __saveds
glue_OFPlainConditionTimedWaitOrExecSignal(OFPlainCondition *_Nonnull condition, OFPlainMutex *_Nonnull mutex, OFTimeInterval timeout, ULONG *_Nonnull signalMask)
{
	return OFPlainConditionTimedWaitOrExecSignal(condition, mutex, timeout, signalMask);
}

int __saveds
glue_OFPlainConditionFree(OFPlainCondition *_Nonnull condition)
{
	return OFPlainConditionFree(condition);
}

int __saveds
glue_OFPlainMutexNew(OFPlainMutex *_Nonnull mutex)
{
	return OFPlainMutexNew(mutex);
}

int __saveds
glue_OFPlainMutexLock(OFPlainMutex *_Nonnull mutex)
{
	return OFPlainMutexLock(mutex);
}

int __saveds
glue_OFPlainMutexTryLock(OFPlainMutex *_Nonnull mutex)
{
	return OFPlainMutexTryLock(mutex);
}

int __saveds
glue_OFPlainMutexUnlock(OFPlainMutex *_Nonnull mutex)
{
	return OFPlainMutexUnlock(mutex);
}

int __saveds
glue_OFPlainMutexFree(OFPlainMutex *_Nonnull mutex)
{
	return OFPlainMutexFree(mutex);
}

int __saveds
glue_OFPlainRecursiveMutexNew(OFPlainRecursiveMutex *_Nonnull mutex)
{
	return OFPlainRecursiveMutexNew(mutex);
}

int __saveds
glue_OFPlainRecursiveMutexLock(OFPlainRecursiveMutex *_Nonnull mutex)
{
	return OFPlainRecursiveMutexLock(mutex);
}

int __saveds
glue_OFPlainRecursiveMutexTryLock(OFPlainRecursiveMutex *_Nonnull mutex)
{
	return OFPlainRecursiveMutexTryLock(mutex);
}

int __saveds
glue_OFPlainRecursiveMutexUnlock(OFPlainRecursiveMutex *_Nonnull mutex)
{
	return OFPlainRecursiveMutexUnlock(mutex);
}

int __saveds
glue_OFPlainRecursiveMutexFree(OFPlainRecursiveMutex *_Nonnull mutex)
{
	return OFPlainRecursiveMutexFree(mutex);
}

int __saveds
glue_OFPlainThreadAttributesInit(OFPlainThreadAttributes *_Nonnull attr)
{
	return OFPlainThreadAttributesInit(attr);
}

int __saveds
glue_OFPlainThreadNew(OFPlainThread _Nonnull *_Nonnull thread, const char *_Nullable name, OFPlainThreadFunction _Nonnull function, id _Nullable object, const OFPlainThreadAttributes *_Nullable attr)
{
	return OFPlainThreadNew(thread, name, function, object, attr);
}

void __saveds
glue_OFSetThreadName(const char *_Nullable name)
{
	OFSetThreadName(name);
}

int __saveds
glue_OFPlainThreadJoin(OFPlainThread _Nonnull thread)
{
	return OFPlainThreadJoin(thread);
}

int __saveds
glue_OFPlainThreadDetach(OFPlainThread _Nonnull thread)
{
	return OFPlainThreadDetach(thread);
}

OFPlainThread _Nonnull __saveds
glue_OFCurrentPlainThread(void)
{
	return OFCurrentPlainThread();
}

bool __saveds
glue_OFPlainThreadIsCurrent(OFPlainThread _Nonnull thread)
{
	return OFPlainThreadIsCurrent(thread);
}

void __saveds
glue_OFScrypt(OFScryptParameters parameters)
{
	OFScrypt(parameters);
}

void __saveds
glue__OFSalsa20_8Core(uint32_t *_Nonnull buffer)
{
	_OFSalsa20_8Core(buffer);
}

void __saveds
glue__OFScryptBlockMix(uint32_t *_Nonnull output, const uint32_t *_Nonnull input, size_t blockSize)
{
	_OFScryptBlockMix(output, input, blockSize);
}

void __saveds
glue__OFScryptROMix(uint32_t *buffer, size_t blockSize, size_t costFactor, uint32_t *tmp)
{
	_OFScryptROMix(buffer, blockSize, costFactor, tmp);
}

OFSocketAddress __saveds
glue_OFSocketAddressParseIP(OFString *_Nonnull IP, uint16_t port)
{
	return OFSocketAddressParseIP(IP, port);
}

OFSocketAddress __saveds
glue_OFSocketAddressParseIPv4(OFString *_Nonnull IP, uint16_t port)
{
	return OFSocketAddressParseIPv4(IP, port);
}

OFSocketAddress __saveds
glue_OFSocketAddressParseIPv6(OFString *_Nonnull IP, uint16_t port)
{
	return OFSocketAddressParseIPv6(IP, port);
}

OFSocketAddress __saveds
glue_OFSocketAddressMakeUNIX(OFString *_Nonnull path)
{
	return OFSocketAddressMakeUNIX(path);
}

OFSocketAddress __saveds
glue_OFSocketAddressMakeIPX(uint32_t network, const unsigned char *_Nonnull node, uint16_t port)
{
	return OFSocketAddressMakeIPX(network, node, port);
}

OFSocketAddress __saveds
glue_OFSocketAddressMakeAppleTalk(uint16_t network, uint8_t node, uint8_t port)
{
	return OFSocketAddressMakeAppleTalk(network, node, port);
}

bool __saveds
glue_OFSocketAddressEqual(const OFSocketAddress *_Nonnull address1, const OFSocketAddress *_Nonnull address2)
{
	return OFSocketAddressEqual(address1, address2);
}

unsigned long __saveds
glue_OFSocketAddressHash(const OFSocketAddress *_Nonnull address)
{
	return OFSocketAddressHash(address);
}

OFString *_Nonnull __saveds
glue_OFSocketAddressString(const OFSocketAddress *_Nonnull address)
{
	return OFSocketAddressString(address);
}

OFString *_Nonnull __saveds
glue_OFSocketAddressDescription(const OFSocketAddress *_Nonnull address)
{
	return OFSocketAddressDescription(address);
}

void __saveds
glue_OFSocketAddressSetIPPort(OFSocketAddress *_Nonnull address, uint16_t port)
{
	OFSocketAddressSetIPPort(address, port);
}

uint16_t __saveds
glue_OFSocketAddressIPPort(const OFSocketAddress *_Nonnull address)
{
	return OFSocketAddressIPPort(address);
}

OFString * __saveds
glue_OFSocketAddressUNIXPath(const OFSocketAddress *_Nonnull address)
{
	return OFSocketAddressUNIXPath(address);
}

void __saveds
glue_OFSocketAddressSetIPXNetwork(OFSocketAddress *_Nonnull address, uint32_t network)
{
	OFSocketAddressSetIPXNetwork(address, network);
}

uint32_t __saveds
glue_OFSocketAddressIPXNetwork(const OFSocketAddress *_Nonnull address)
{
	return OFSocketAddressIPXNetwork(address);
}

void __saveds
glue_OFSocketAddressSetIPXNode(OFSocketAddress *_Nonnull address, const unsigned char *_Nonnull node)
{
	OFSocketAddressSetIPXNode(address, node);
}

void __saveds
glue_OFSocketAddressGetIPXNode(const OFSocketAddress *_Nonnull address, unsigned char *_Nonnull node)
{
	OFSocketAddressGetIPXNode(address, node);
}

void __saveds
glue_OFSocketAddressSetIPXPort(OFSocketAddress *_Nonnull address, uint16_t port)
{
	OFSocketAddressSetIPXPort(address, port);
}

uint16_t __saveds
glue_OFSocketAddressIPXPort(const OFSocketAddress *_Nonnull address)
{
	return OFSocketAddressIPXPort(address);
}

void __saveds
glue_OFSocketAddressSetAppleTalkNetwork(OFSocketAddress *_Nonnull address, uint16_t network)
{
	OFSocketAddressSetAppleTalkNetwork(address, network);
}

uint16_t __saveds
glue_OFSocketAddressAppleTalkNetwork(const OFSocketAddress *_Nonnull address)
{
	return OFSocketAddressAppleTalkNetwork(address);
}

void __saveds
glue_OFSocketAddressSetAppleTalkNode(OFSocketAddress *_Nonnull address, uint8_t node)
{
	OFSocketAddressSetAppleTalkNode(address, node);
}

uint8_t __saveds
glue_OFSocketAddressAppleTalkNode(const OFSocketAddress *_Nonnull address)
{
	return OFSocketAddressAppleTalkNode(address);
}

void __saveds
glue_OFSocketAddressSetAppleTalkPort(OFSocketAddress *_Nonnull address, uint8_t port)
{
	OFSocketAddressSetAppleTalkPort(address, port);
}

uint8_t __saveds
glue_OFSocketAddressAppleTalkPort(const OFSocketAddress *_Nonnull address)
{
	return OFSocketAddressAppleTalkPort(address);
}

OFStdIOStream *_Nonnull *_Nullable __saveds
glue_OFStdInRef(void)
{
	return OFStdInRef();
}

OFStdIOStream *_Nonnull *_Nullable __saveds
glue_OFStdOutRef(void)
{
	return OFStdOutRef();
}

OFStdIOStream *_Nonnull *_Nullable __saveds
glue_OFStdErrRef(void)
{
	return OFStdErrRef();
}

void __saveds
glue_OFLogV(OFConstantString *_Nonnull format, va_list arguments)
{
	OFLogV(format, arguments);
}

const char *_Nullable __saveds
glue__OFStrPTime(const char *buffer, const char *format, struct tm *tm, int16_t *_Nullable tz)
{
	return _OFStrPTime(buffer, format, tm, tz);
}

OFStringEncoding __saveds
glue_OFStringEncodingParseName(OFString *_Nonnull string)
{
	return OFStringEncodingParseName(string);
}

OFString *_Nullable __saveds
glue_OFStringEncodingName(OFStringEncoding encoding)
{
	return OFStringEncodingName(encoding);
}

size_t __saveds
glue_OFUTF16StringLength(const OFChar16 *_Nonnull string)
{
	return OFUTF16StringLength(string);
}

size_t __saveds
glue_OFUTF32StringLength(const OFChar32 *_Nonnull string)
{
	return OFUTF32StringLength(string);
}

int __saveds
glue_OFTLSKeyNew(OFTLSKey _Nonnull *_Nonnull key)
{
	return OFTLSKeyNew(key);
}

int __saveds
glue_OFTLSKeyFree(OFTLSKey _Nonnull key)
{
	return OFTLSKeyFree(key);
}

Class _Nonnull *_Nullable __saveds
glue_OFTLSStreamImplementationRef(void)
{
	return OFTLSStreamImplementationRef();
}

OFString * __saveds
glue_OFTLSStreamErrorCodeDescription(OFTLSStreamErrorCode errorCode)
{
	return OFTLSStreamErrorCodeDescription(errorCode);
}

Class _Nonnull *_Nullable __saveds
glue_OFX509CertificateImplementationRef(void)
{
	return OFX509CertificateImplementationRef();
}

OFString *_Nonnull __saveds
glue_OFZIPArchiveEntryVersionToString(uint16_t version)
{
	return OFZIPArchiveEntryVersionToString(version);
}

OFString *_Nonnull __saveds
glue_OFZIPArchiveEntryCompressionMethodName(OFZIPArchiveEntryCompressionMethod compressionMethod)
{
	return OFZIPArchiveEntryCompressionMethodName(compressionMethod);
}

size_t __saveds
glue_OFZIPArchiveEntryExtraFieldFind(OFData *_Nonnull extraField, OFZIPArchiveEntryExtraFieldTag tag, uint16_t *_Nonnull size)
{
	return OFZIPArchiveEntryExtraFieldFind(extraField, tag, size);
}

OFString *_Nonnull __saveds
glue_OFStrError(int errNo)
{
	return OFStrError(errNo);
}

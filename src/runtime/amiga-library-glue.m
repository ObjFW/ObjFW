/*
 * Copyright (c) 2008-2025 Jonathan Schleifer <js@nil.im>
 *
 * All rights reserved.
 *
 * This program is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License version 3.0 only,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License
 * version 3.0 for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3.0 along with this program. If not, see
 * <https://www.gnu.org/licenses/>.
 */

/* This file is automatically generated from amiga-library.xml */

#include "config.h"

#import "amiga-glue.h"


bool __saveds
glue_objc_init(void)
{
	M68K_ARG(struct objc_linklib_context *, ctx, a0)

	return objc_init(ctx);
}

void __saveds
glue___objc_exec_class(void)
{
	M68K_ARG(struct objc_module *_Nonnull, module, a0)

	__objc_exec_class(module);
}

#if !defined(OF_AMIGAOS_M68K)
int __saveds
glue___gnu_objc_personality_v0(void)
{
	M68K_ARG(int, version, (nil))
	M68K_ARG(int, actions, (nil))
	M68K_ARG(uint64_t, exClass, (nil))
	M68K_ARG(void *_Nonnull, ex, (nil))
	M68K_ARG(void *_Nonnull, ctx, (nil))

	return __gnu_objc_personality_v0(version, actions, exClass, ex, ctx);
}
#endif

#if defined(OF_AMIGAOS_M68K)
int __saveds
glue___gnu_objc_personality_sj0_wrapper(void)
{
	M68K_ARG(int, version, d0)
	M68K_ARG(int, actions, d1)
	M68K_ARG(uint64_t *_Nonnull, exClass, a0)
	M68K_ARG(void *_Nonnull, ex, a1)
	M68K_ARG(void *_Nonnull, ctx, a2)

	return __gnu_objc_personality_sj0_wrapper(version, actions, exClass, ex, ctx);
}
#endif

void __saveds
glue_class_registerAlias_np(void)
{
	M68K_ARG(Class _Nonnull, class_, a0)
	M68K_ARG(const char *_Nonnull, name, a1)

	class_registerAlias_np(class_, name);
}

IMP _Nonnull __saveds
glue_objc_msg_lookup(void)
{
	M68K_ARG(id _Nullable, object, a0)
	M68K_ARG(SEL _Nonnull, selector, a1)

	return objc_msg_lookup(object, selector);
}

IMP _Nonnull __saveds
glue_objc_msg_lookup_stret(void)
{
	M68K_ARG(id _Nullable, object, a0)
	M68K_ARG(SEL _Nonnull, selector, a1)

	return objc_msg_lookup_stret(object, selector);
}

IMP _Nonnull __saveds
glue_objc_msg_lookup_super(void)
{
	M68K_ARG(struct objc_super *_Nonnull, super, a0)
	M68K_ARG(SEL _Nonnull, selector, a1)

	return objc_msg_lookup_super(super, selector);
}

IMP _Nonnull __saveds
glue_objc_msg_lookup_super_stret(void)
{
	M68K_ARG(struct objc_super *_Nonnull, super, a0)
	M68K_ARG(SEL _Nonnull, selector, a1)

	return objc_msg_lookup_super_stret(super, selector);
}

Class _Nullable __saveds
glue_objc_lookUpClass(void)
{
	M68K_ARG(const char *_Nonnull, name, a0)

	return objc_lookUpClass(name);
}

Class _Nullable __saveds
glue_objc_getClass(void)
{
	M68K_ARG(const char *_Nonnull, name, a0)

	return objc_getClass(name);
}

Class _Nonnull __saveds
glue_objc_getRequiredClass(void)
{
	M68K_ARG(const char *_Nonnull, name, a0)

	return objc_getRequiredClass(name);
}

Class _Nullable __saveds
glue_objc_lookup_class(void)
{
	M68K_ARG(const char *_Nonnull, name, a0)

	return objc_lookup_class(name);
}

Class _Nonnull __saveds
glue_objc_get_class(void)
{
	M68K_ARG(const char *_Nonnull, name, a0)

	return objc_get_class(name);
}

void __saveds
glue_objc_exception_throw(void)
{
	M68K_ARG(id _Nonnull, object, a0)

	objc_exception_throw(object);
}

int __saveds
glue_objc_sync_enter(void)
{
	M68K_ARG(id _Nullable, object, a0)

	return objc_sync_enter(object);
}

int __saveds
glue_objc_sync_exit(void)
{
	M68K_ARG(id _Nullable, object, a0)

	return objc_sync_exit(object);
}

id _Nullable __saveds
glue_objc_getProperty(void)
{
	M68K_ARG(id _Nonnull, self, a0)
	M68K_ARG(SEL _Nonnull, _cmd, a1)
	M68K_ARG(ptrdiff_t, offset, d0)
	M68K_ARG(bool, atomic, d1)

	return objc_getProperty(self, _cmd, offset, atomic);
}

void __saveds
glue_objc_setProperty(void)
{
	M68K_ARG(id _Nonnull, self, a0)
	M68K_ARG(SEL _Nonnull, _cmd, a1)
	M68K_ARG(ptrdiff_t, offset, d0)
	M68K_ARG(id _Nullable, value, a2)
	M68K_ARG(bool, atomic, d1)
	M68K_ARG(signed char, copy, d2)

	objc_setProperty(self, _cmd, offset, value, atomic, copy);
}

void __saveds
glue_objc_getPropertyStruct(void)
{
	M68K_ARG(void *_Nonnull, dest, a0)
	M68K_ARG(const void *_Nonnull, src, a1)
	M68K_ARG(ptrdiff_t, size, d0)
	M68K_ARG(bool, atomic, d1)
	M68K_ARG(bool, strong, d2)

	objc_getPropertyStruct(dest, src, size, atomic, strong);
}

void __saveds
glue_objc_setPropertyStruct(void)
{
	M68K_ARG(void *_Nonnull, dest, a0)
	M68K_ARG(const void *_Nonnull, src, a1)
	M68K_ARG(ptrdiff_t, size, d0)
	M68K_ARG(bool, atomic, d1)
	M68K_ARG(bool, strong, d2)

	objc_setPropertyStruct(dest, src, size, atomic, strong);
}

void __saveds
glue_objc_enumerationMutation(void)
{
	M68K_ARG(id _Nonnull, object, a0)

	objc_enumerationMutation(object);
}

id _Nullable __saveds
glue_objc_retain(void)
{
	M68K_ARG(id _Nullable, object, a0)

	return objc_retain(object);
}

id _Nullable __saveds
glue_objc_retainBlock(void)
{
	M68K_ARG(id _Nullable, block, a0)

	return objc_retainBlock(block);
}

id _Nullable __saveds
glue_objc_retainAutorelease(void)
{
	M68K_ARG(id _Nullable, object, a0)

	return objc_retainAutorelease(object);
}

void __saveds
glue_objc_release(void)
{
	M68K_ARG(id _Nullable, object, a0)

	objc_release(object);
}

id _Nullable __saveds
glue_objc_autorelease(void)
{
	M68K_ARG(id _Nullable, object, a0)

	return objc_autorelease(object);
}

id _Nullable __saveds
glue_objc_autoreleaseReturnValue(void)
{
	M68K_ARG(id _Nullable, object, a0)

	return objc_autoreleaseReturnValue(object);
}

id _Nullable __saveds
glue_objc_retainAutoreleaseReturnValue(void)
{
	M68K_ARG(id _Nullable, object, a0)

	return objc_retainAutoreleaseReturnValue(object);
}

id _Nullable __saveds
glue_objc_retainAutoreleasedReturnValue(void)
{
	M68K_ARG(id _Nullable, object, a0)

	return objc_retainAutoreleasedReturnValue(object);
}

id _Nullable __saveds
glue_objc_storeStrong(void)
{
	M68K_ARG(id _Nullable *_Nonnull, object, a0)
	M68K_ARG(id _Nullable, value, a1)

	return objc_storeStrong(object, value);
}

id _Nullable __saveds
glue_objc_storeWeak(void)
{
	M68K_ARG(id _Nullable *_Nonnull, object, a0)
	M68K_ARG(id _Nullable, value, a1)

	return objc_storeWeak(object, value);
}

id _Nullable __saveds
glue_objc_loadWeakRetained(void)
{
	M68K_ARG(id _Nullable *_Nonnull, object, a0)

	return objc_loadWeakRetained(object);
}

id _Nullable __saveds
glue_objc_initWeak(void)
{
	M68K_ARG(id _Nullable *_Nonnull, object, a0)
	M68K_ARG(id _Nullable, value, a1)

	return objc_initWeak(object, value);
}

void __saveds
glue_objc_destroyWeak(void)
{
	M68K_ARG(id _Nullable *_Nonnull, object, a0)

	objc_destroyWeak(object);
}

id _Nullable __saveds
glue_objc_loadWeak(void)
{
	M68K_ARG(id _Nullable *_Nonnull, object, a0)

	return objc_loadWeak(object);
}

void __saveds
glue_objc_copyWeak(void)
{
	M68K_ARG(id _Nullable *_Nonnull, dest, a0)
	M68K_ARG(id _Nullable *_Nonnull, src, a1)

	objc_copyWeak(dest, src);
}

void __saveds
glue_objc_moveWeak(void)
{
	M68K_ARG(id _Nullable *_Nonnull, dest, a0)
	M68K_ARG(id _Nullable *_Nonnull, src, a1)

	objc_moveWeak(dest, src);
}

SEL _Nonnull __saveds
glue_sel_registerName(void)
{
	M68K_ARG(const char *_Nonnull, name, a0)

	return sel_registerName(name);
}

const char *_Nonnull __saveds
glue_sel_getName(void)
{
	M68K_ARG(SEL _Nonnull, selector, a0)

	return sel_getName(selector);
}

bool __saveds
glue_sel_isEqual(void)
{
	M68K_ARG(SEL _Nonnull, selector1, a0)
	M68K_ARG(SEL _Nonnull, selector2, a1)

	return sel_isEqual(selector1, selector2);
}

Class _Nonnull __saveds
glue_objc_allocateClassPair(void)
{
	M68K_ARG(Class _Nullable, superclass, a0)
	M68K_ARG(const char *_Nonnull, name, a1)
	M68K_ARG(size_t, extraBytes, d0)

	return objc_allocateClassPair(superclass, name, extraBytes);
}

void __saveds
glue_objc_registerClassPair(void)
{
	M68K_ARG(Class _Nonnull, class_, a0)

	objc_registerClassPair(class_);
}

unsigned int __saveds
glue_objc_getClassList(void)
{
	M68K_ARG(Class _Nonnull *_Nullable, buffer, a0)
	M68K_ARG(unsigned int, count, d0)

	return objc_getClassList(buffer, count);
}

Class _Nonnull *_Nonnull __saveds
glue_objc_copyClassList(void)
{
	M68K_ARG(unsigned int *_Nullable, length, a0)

	return objc_copyClassList(length);
}

bool __saveds
glue_class_isMetaClass(void)
{
	M68K_ARG(Class _Nullable, class_, a0)

	return class_isMetaClass(class_);
}

const char *_Nullable __saveds
glue_class_getName(void)
{
	M68K_ARG(Class _Nullable, class_, a0)

	return class_getName(class_);
}

Class _Nullable __saveds
glue_class_getSuperclass(void)
{
	M68K_ARG(Class _Nullable, class_, a0)

	return class_getSuperclass(class_);
}

unsigned long __saveds
glue_class_getInstanceSize(void)
{
	M68K_ARG(Class _Nullable, class_, a0)

	return class_getInstanceSize(class_);
}

bool __saveds
glue_class_respondsToSelector(void)
{
	M68K_ARG(Class _Nullable, class_, a0)
	M68K_ARG(SEL _Nonnull, selector, a1)

	return class_respondsToSelector(class_, selector);
}

bool __saveds
glue_class_conformsToProtocol(void)
{
	M68K_ARG(Class _Nullable, class_, a0)
	M68K_ARG(Protocol *_Nonnull, p, a1)

	return class_conformsToProtocol(class_, p);
}

IMP _Nullable __saveds
glue_class_getMethodImplementation(void)
{
	M68K_ARG(Class _Nullable, class_, a0)
	M68K_ARG(SEL _Nonnull, selector, a1)

	return class_getMethodImplementation(class_, selector);
}

IMP _Nullable __saveds
glue_class_getMethodImplementation_stret(void)
{
	M68K_ARG(Class _Nullable, class_, a0)
	M68K_ARG(SEL _Nonnull, selector, a1)

	return class_getMethodImplementation_stret(class_, selector);
}

Method _Nullable __saveds
glue_class_getInstanceMethod(void)
{
	M68K_ARG(Class _Nullable, class_, a0)
	M68K_ARG(SEL _Nonnull, selector, a1)

	return class_getInstanceMethod(class_, selector);
}

bool __saveds
glue_class_addMethod(void)
{
	M68K_ARG(Class _Nonnull, class_, a0)
	M68K_ARG(SEL _Nonnull, selector, a1)
	M68K_ARG(IMP _Nonnull, implementation, a2)
	M68K_ARG(const char *_Nullable, typeEncoding, a3)

	return class_addMethod(class_, selector, implementation, typeEncoding);
}

IMP _Nullable __saveds
glue_class_replaceMethod(void)
{
	M68K_ARG(Class _Nonnull, class_, a0)
	M68K_ARG(SEL _Nonnull, selector, a1)
	M68K_ARG(IMP _Nonnull, implementation, a2)
	M68K_ARG(const char *_Nullable, typeEncoding, a3)

	return class_replaceMethod(class_, selector, implementation, typeEncoding);
}

Class _Nullable __saveds
glue_object_getClass(void)
{
	M68K_ARG(id _Nullable, object, a0)

	return object_getClass(object);
}

Class _Nullable __saveds
glue_object_setClass(void)
{
	M68K_ARG(id _Nullable, object, a0)
	M68K_ARG(Class _Nonnull, class_, a1)

	return object_setClass(object, class_);
}

const char *_Nullable __saveds
glue_object_getClassName(void)
{
	M68K_ARG(id _Nullable, object, a0)

	return object_getClassName(object);
}

const char *_Nonnull __saveds
glue_protocol_getName(void)
{
	M68K_ARG(Protocol *_Nonnull, protocol, a0)

	return protocol_getName(protocol);
}

bool __saveds
glue_protocol_isEqual(void)
{
	M68K_ARG(Protocol *_Nonnull, protocol1, a0)
	M68K_ARG(Protocol *_Nonnull, protocol2, a1)

	return protocol_isEqual(protocol1, protocol2);
}

bool __saveds
glue_protocol_conformsToProtocol(void)
{
	M68K_ARG(Protocol *_Nonnull, protocol1, a0)
	M68K_ARG(Protocol *_Nonnull, protocol2, a1)

	return protocol_conformsToProtocol(protocol1, protocol2);
}

Method _Nullable *_Nullable __saveds
glue_class_copyMethodList(void)
{
	M68K_ARG(Class _Nullable, class_, a0)
	M68K_ARG(unsigned int *_Nullable, outCount, a1)

	return class_copyMethodList(class_, outCount);
}

SEL _Nonnull __saveds
glue_method_getName(void)
{
	M68K_ARG(Method _Nonnull, method, a0)

	return method_getName(method);
}

const char *_Nullable __saveds
glue_method_getTypeEncoding(void)
{
	M68K_ARG(Method _Nonnull, method, a0)

	return method_getTypeEncoding(method);
}

Ivar _Nullable *_Nullable __saveds
glue_class_copyIvarList(void)
{
	M68K_ARG(Class _Nullable, class_, a0)
	M68K_ARG(unsigned int *_Nullable, outCount, a1)

	return class_copyIvarList(class_, outCount);
}

const char *_Nonnull __saveds
glue_ivar_getName(void)
{
	M68K_ARG(Ivar _Nonnull, ivar, a0)

	return ivar_getName(ivar);
}

const char *_Nonnull __saveds
glue_ivar_getTypeEncoding(void)
{
	M68K_ARG(Ivar _Nonnull, ivar, a0)

	return ivar_getTypeEncoding(ivar);
}

ptrdiff_t __saveds
glue_ivar_getOffset(void)
{
	M68K_ARG(Ivar _Nonnull, ivar, a0)

	return ivar_getOffset(ivar);
}

objc_property_t _Nullable *_Nullable __saveds
glue_class_copyPropertyList(void)
{
	M68K_ARG(Class _Nullable, class_, a0)
	M68K_ARG(unsigned int *_Nullable, outCount, a1)

	return class_copyPropertyList(class_, outCount);
}

const char *_Nonnull __saveds
glue_property_getName(void)
{
	M68K_ARG(objc_property_t _Nonnull, property, a0)

	return property_getName(property);
}

char *_Nullable __saveds
glue_property_copyAttributeValue(void)
{
	M68K_ARG(objc_property_t _Nonnull, property, a0)
	M68K_ARG(const char *_Nonnull, name, a1)

	return property_copyAttributeValue(property, name);
}

void __saveds
glue_objc_deinit(void)
{
	objc_deinit();
}

_Nullable objc_uncaught_exception_handler __saveds
glue_objc_setUncaughtExceptionHandler(void)
{
	M68K_ARG(objc_uncaught_exception_handler _Nullable, handler, a0)

	return objc_setUncaughtExceptionHandler(handler);
}

void __saveds
glue_objc_setForwardHandler(void)
{
	M68K_ARG(IMP _Nullable, forward, a0)
	M68K_ARG(IMP _Nullable, stretForward, a1)

	objc_setForwardHandler(forward, stretForward);
}

void __saveds
glue_objc_setEnumerationMutationHandler(void)
{
	M68K_ARG(objc_enumeration_mutation_handler _Nullable, hadler, a0)

	objc_setEnumerationMutationHandler(hadler);
}

id _Nullable __saveds
glue_objc_constructInstance(void)
{
	M68K_ARG(Class _Nullable, class_, a0)
	M68K_ARG(void *_Nullable, bytes, a1)

	return objc_constructInstance(class_, bytes);
}

void *_Nullable __saveds
glue_objc_destructInstance(void)
{
	M68K_ARG(id _Nullable, object, a0)

	return objc_destructInstance(object);
}

id _Nullable __saveds
glue_class_createInstance(void)
{
	M68K_ARG(Class _Nullable, class_, a0)
	M68K_ARG(size_t, extraBytes, d0)

	return class_createInstance(class_, extraBytes);
}

id _Nullable __saveds
glue_object_dispose(void)
{
	M68K_ARG(id _Nullable, object, a0)

	return object_dispose(object);
}

id _Nonnull __saveds
glue__objc_rootRetain(void)
{
	M68K_ARG(id _Nonnull, object, a0)

	return _objc_rootRetain(object);
}

unsigned int __saveds
glue__objc_rootRetainCount(void)
{
	M68K_ARG(id _Nonnull, object, a0)

	return _objc_rootRetainCount(object);
}

void __saveds
glue__objc_rootRelease(void)
{
	M68K_ARG(id _Nonnull, object, a0)

	_objc_rootRelease(object);
}

void *_Null_unspecified __saveds
glue_objc_autoreleasePoolPush(void)
{
	return objc_autoreleasePoolPush();
}

void __saveds
glue_objc_autoreleasePoolPop(void)
{
	M68K_ARG(void *_Null_unspecified, pool, a0)

	objc_autoreleasePoolPop(pool);
}

id _Nullable __saveds
glue__objc_rootAutorelease(void)
{
	M68K_ARG(id _Nullable, object, a0)

	return _objc_rootAutorelease(object);
}

void __saveds
glue_objc_setTaggedPointerSecret(void)
{
	M68K_ARG(uintptr_t, secret, d0)

	objc_setTaggedPointerSecret(secret);
}

int __saveds
glue_objc_registerTaggedPointerClass(void)
{
	M68K_ARG(Class _Nonnull, class_, a0)

	return objc_registerTaggedPointerClass(class_);
}

bool __saveds
glue_object_isTaggedPointer(void)
{
	M68K_ARG(id _Nullable, object, a0)

	return object_isTaggedPointer(object);
}

uintptr_t __saveds
glue_object_getTaggedPointerValue(void)
{
	M68K_ARG(id _Nonnull, object, a0)

	return object_getTaggedPointerValue(object);
}

id _Nullable __saveds
glue_objc_createTaggedPointer(void)
{
	M68K_ARG(int, class_, a0)
	M68K_ARG(uintptr_t, value, d0)

	return objc_createTaggedPointer(class_, value);
}

void __saveds
glue_objc_setAssociatedObject(void)
{
	M68K_ARG(id _Nonnull, object, a0)
	M68K_ARG(const void *_Nonnull, key, a1)
	M68K_ARG(id _Nullable, value, a2)
	M68K_ARG(objc_associationPolicy, policy, d0)

	objc_setAssociatedObject(object, key, value, policy);
}

id _Nullable __saveds
glue_objc_getAssociatedObject(void)
{
	M68K_ARG(id _Nonnull, object, a0)
	M68K_ARG(const void *_Nonnull, key, a1)

	return objc_getAssociatedObject(object, key);
}

void __saveds
glue_objc_removeAssociatedObjects(void)
{
	M68K_ARG(id _Nonnull, object, a0)

	objc_removeAssociatedObjects(object);
}
